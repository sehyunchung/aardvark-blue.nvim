#!/usr/bin/env tsx

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

type FileCheck = {
  path: string;
  name: string;
  required: boolean;
};

function checkFileExists(filePath: string): boolean {
  try {
    return fs.existsSync(filePath) && fs.statSync(filePath).isFile();
  } catch {
    return false;
  }
}

function checkFileHasHeader(filePath: string, expectedHeader: string): boolean {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.includes(expectedHeader);
  } catch {
    return false;
  }
}

function validateLuaFile(filePath: string): string[] {
  const errors: string[] = [];
  
  if (!checkFileExists(filePath)) {
    errors.push(`File does not exist: ${filePath}`);
    return errors;
  }
  
  // Check for auto-generated header
  if (!checkFileHasHeader(filePath, 'Auto-generated by build/generate.ts')) {
    errors.push(`Missing auto-generated header: ${path.basename(filePath)}`);
  }
  
  // Check for DO NOT EDIT warning
  if (!checkFileHasHeader(filePath, 'DO NOT EDIT THIS FILE DIRECTLY!')) {
    errors.push(`Missing edit warning: ${path.basename(filePath)}`);
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // Basic Lua syntax check (very basic)
    if (content.includes('return {') && !content.includes('}\n')) {
      if (!content.endsWith('}')) {
        errors.push(`Possible syntax error - missing closing brace: ${path.basename(filePath)}`);
      }
    }
    
    // Check for placeholder values
    if (content.includes('TODO') || content.includes('FIXME') || content.includes('XXX')) {
      errors.push(`Contains placeholder values: ${path.basename(filePath)}`);
    }
    
  } catch (error) {
    errors.push(`Failed to read file: ${path.basename(filePath)} - ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
  
  return errors;
}

function validateJSONFile(filePath: string): string[] {
  const errors: string[] = [];
  
  if (!checkFileExists(filePath)) {
    errors.push(`File does not exist: ${filePath}`);
    return errors;
  }
  
  // Check for auto-generated header
  if (!checkFileHasHeader(filePath, 'Auto-generated by build/generate.ts')) {
    errors.push(`Missing auto-generated header: ${path.basename(filePath)}`);
  }
  
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const parsed = JSON.parse(content);
    
    // VS Code theme specific validation
    if (!parsed.name || !parsed.type || !parsed.colors) {
      errors.push(`Invalid VS Code theme structure: ${path.basename(filePath)}`);
    }
    
    if (parsed.type !== 'dark') {
      errors.push(`Expected dark theme, got: ${parsed.type} in ${path.basename(filePath)}`);
    }
    
    // Check for required VS Code theme properties
    const requiredColors = [
      'editor.background',
      'editor.foreground',
      'activityBar.background',
      'statusBar.background'
    ];
    
    for (const color of requiredColors) {
      if (!parsed.colors[color]) {
        errors.push(`Missing required color '${color}' in ${path.basename(filePath)}`);
      }
    }
    
  } catch (error) {
    errors.push(`Invalid JSON in ${path.basename(filePath)}: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
  
  return errors;
}

// Main validation
console.log('Validating generated files...\n');

const luaOutputDir = path.join(__dirname, '../lua/aardvark-blue');
const vscodeOutputDir = path.join(__dirname, '../extras/vscode/themes');

const luaFiles: FileCheck[] = [
  { path: path.join(luaOutputDir, 'palette.lua'), name: 'palette.lua', required: true },
  { path: path.join(luaOutputDir, 'highlights.lua'), name: 'highlights.lua', required: true }
];

const vscodeFiles: FileCheck[] = [
  { path: path.join(vscodeOutputDir, 'aardvark-blue-color-theme.json'), name: 'aardvark-blue-color-theme.json', required: true }
];

// Check for additional variant files
try {
  const vscodeThemeFiles = fs.readdirSync(vscodeOutputDir);
  for (const file of vscodeThemeFiles) {
    if (file.startsWith('aardvark-blue-') && file.endsWith('-color-theme.json') && file !== 'aardvark-blue-color-theme.json') {
      vscodeFiles.push({ 
        path: path.join(vscodeOutputDir, file), 
        name: file, 
        required: false 
      });
    }
  }
} catch {
  // Directory might not exist
}

let totalErrors = 0;

// Validate Lua files
console.log('🔧 Neovim Lua files:');
for (const file of luaFiles) {
  const errors = validateLuaFile(file.path);
  
  if (errors.length === 0) {
    console.log(`  ✅ ${file.name}`);
  } else {
    console.log(`  ❌ ${file.name}:`);
    errors.forEach(error => console.log(`    • ${error}`));
    totalErrors += errors.length;
  }
}

console.log();

// Validate VS Code files
console.log('🎨 VS Code theme files:');
for (const file of vscodeFiles) {
  const errors = validateJSONFile(file.path);
  
  if (errors.length === 0) {
    console.log(`  ✅ ${file.name}`);
  } else {
    console.log(`  ❌ ${file.name}:`);
    errors.forEach(error => console.log(`    • ${error}`));
    totalErrors += errors.length;
  }
}

console.log();

// Summary
console.log(`📊 Summary: ${totalErrors} errors found`);

if (totalErrors > 0) {
  console.log('\n❌ Generated file validation failed! Please run `npm run generate` to fix.');
  process.exit(1);
} else {
  console.log('\n✅ All generated files are valid!');
}